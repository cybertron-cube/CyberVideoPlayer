name: Base release

on:
  workflow_call:
    inputs:
      release-type:
        required: true
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    outputs:
      version: ${{ steps.create-release.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Install semantic-release/exec
        run: npm install @semantic-release/exec -D
      - name: Apply semantic release config
        run: sh scripts/config-apply.sh ${{ inputs.release-type }}
      - name: Create release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [release]
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.release.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: "recursive"
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"
      - name: Install nuget package dependencies
        run: dotnet restore
      - name: Download FFmpeg Binaries
        run: python scripts/build.py -dlffmpeg
      - name: Run build script
        run: python scripts/build.py -version $VERSION -compile win-x64 -buildupdater -cpymds -cpyffmpeg -cpympv -cpymediainfo -cpyupdater -rmpdbs -zip -winpkg
      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # gh release upload <tag> <files>
        run: gh release upload $VERSION build/win-x64.zip package/CVP-win-x64-setup.exe
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.release.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: "recursive"
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"
      - name: Install nuget package dependencies
        run: dotnet restore
      - name: Download FFmpeg Binaries
        run: python scripts/build.py -dlffmpeg
      - name: Run build script
        run: sh scripts/build-linux-x64.sh $VERSION y
      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload $VERSION build/linux-x64.tar.gz
  build-osx:
    name: Build OSX
    runs-on: macos-latest
    needs: [release]
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.release.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: "recursive"
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"
      - name: Install nuget package dependencies
        run: dotnet restore
      - name: Download FFmpeg Binaries
        run: python scripts/build.py -dlffmpeg
      - name: Run build script
        run: sh scripts/build-osx.sh $VERSION y y b
      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload $VERSION build/CVP-osx-x64-setup.dmg build/osx-x64.tar.gz build/CVP-osx-arm64-setup.dmg build/osx-arm64.tar.gz
  #Publish a release that was previously a draft
  #$ gh release edit v1.2.3 --draft=false
