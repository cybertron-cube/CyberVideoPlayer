<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <PackageId>$(AssemblyName)</PackageId>
    <ApplicationIcon>Assets/Logo/cyber-logo-sunset.ico</ApplicationIcon>
    <AssemblyName>CyberVideoPlayer</AssemblyName>
    <Configurations>Debug;Release;Release-win-x64-multi;Release-win-x64-single;Release-linux-x64-single;Release-linux-x64-multi;Release-osx-x64-multi;Release-osx-x64-single;Release-portable-single;Release-portable-multi</Configurations>
    <Platforms>AnyCPU</Platforms>
  </PropertyGroup>

  <!-- MULTI;SINGLE;PORTABLE;WINX64;OSXX64;LINUXX64 -->
  
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' Or '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DefineConstants Condition=" $([MSBuild]::IsOSPlatform('OSX')) ">$(DefineConstants);OSXX64;SINGLE;</DefineConstants>
    <DefineConstants Condition=" $([MSBuild]::IsOSPlatform('Linux')) ">$(DefineConstants);LINUXX64;SINGLE;</DefineConstants>
    <DefineConstants Condition=" $([MSBuild]::IsOSPlatform('Windows')) ">$(DefineConstants);WINX64;SINGLE;</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(Configuration)' == 'Release-win-x64-multi' ">
    <DefineConstants>$(DefineConstants);MULTI;WINX64</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(Configuration)' == 'Release-win-x64-single' ">
    <DefineConstants>$(DefineConstants);SINGLE;WINX64;</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-linux-x64-multi' ">
    <DefineConstants>$(DefineConstants);MULTI;LINUXX64</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-linux-x64-single' ">
    <DefineConstants>$(DefineConstants);SINGLE;LINUXX64</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-osx-x64-multi' ">
    <DefineConstants>$(DefineConstants);MULTI;OSXX64</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-osx-x64-single' ">
    <DefineConstants>$(DefineConstants);SINGLE;OSXX64</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-portable-multi' ">
    <DefineConstants>$(DefineConstants);MULTI;PORTABLE</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release-portable-single' ">
    <DefineConstants>$(DefineConstants);SINGLE;PORTABLE</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>
  
  <PropertyGroup Condition=" ($(DefineConstants.Contains(LINUXX64)) And $([MSBuild]::IsOSPlatform('Linux'))) Or ($(DefineConstants.Contains(OSXX64)) And $([MSBuild]::IsOSPlatform('OSX'))) Or $(DefineConstants.Contains(WINX64)) And $([MSBuild]::IsOSPlatform('Windows'))">
    <PublishAot>true</PublishAot>
  </PropertyGroup>
  
  <ItemGroup>
    <TrimmerRootDescriptor Include="Roots.xml" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Assets\Logo\*.ico" />
    <AvaloniaResource Include="Assets\Images\*.svg" />
    <AvaloniaResource Include="Assets\Images\*.ico" />
    <AvaloniaResource Include="Assets\Fonts\**\*.ttf" />
    <None Remove=".gitignore" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.0.1" />
    <PackageReference Include="Avalonia.Desktop" Version="11.0.1" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.0.1" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.0.1" />
    <PackageReference Include="Avalonia.ReactiveUI" Version="11.0.1" />
    <PackageReference Include="HanumanInstitute.MvvmDialogs.Avalonia" Version="2.0.0" />
    <PackageReference Include="Markdown.Avalonia" Version="11.0.0" />
    <PackageReference Include="ReactiveMarbles.ObservableEvents.SourceGenerator" Version="1.2.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="ReactiveUI.Fody" Version="19.4.1" PrivateAssets="all" />
    <PackageReference Include="Serilog" Version="3.0.1" />
    <PackageReference Include="Serilog.Sinks.Async" Version="1.5.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="5.0.0" />
    <PackageReference Include="Splat.DependencyInjection.SourceGenerator" Version="1.1.93" PrivateAssets="all" />
    <PackageReference Include="Splat.Serilog" Version="14.7.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\cyber-lib\Common Libraries\Cybertron.csproj" />
    <TrimmerRootAssembly Include="Cybertron" />
    <ProjectReference Include="..\LibMpv.Context\LibMpv.Context.csproj" />
  </ItemGroup>

  <Target Name="FFmpegCopy" AfterTargets="CoreCompile">
    <Copy Condition=" $(DefineConstants.Contains(WINX64)) Or $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\ffmpeg\win\ffmpeg.exe;..\..\ffmpeg\win\ffprobe.exe" DestinationFolder="$(OutDir)\ffmpeg" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(LINUXX64)) " SourceFiles="..\..\ffmpeg\linux\ffmpeg;..\..\ffmpeg\linux\ffprobe" DestinationFolder="$(OutDir)\ffmpeg" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(OSXX64)) " SourceFiles="..\..\ffmpeg\osx\ffmpeg;..\..\ffmpeg\osx\ffprobe" DestinationFolder="$(OutDir)\ffmpeg" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\ffmpeg\linux\ffmpeg;..\..\ffmpeg\linux\ffprobe" DestinationFiles="$(OutDir)\ffmpeg\ffmpeg-linux;$(OutDir)\ffmpeg\ffprobe-linux" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\ffmpeg\osx\ffmpeg;..\..\ffmpeg\osx\ffprobe" DestinationFiles="$(OutDir)\ffmpeg\ffmpeg-osx;$(OutDir)\ffmpeg\ffprobe-osx" SkipUnchangedFiles="true" />
  </Target>
  
  <Target Name="LibMpvCopy" AfterTargets="FFmpegCopy">
    <Copy Condition=" $(DefineConstants.Contains(WINX64)) Or $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\mpv\win\libmpv-2.dll" DestinationFolder="$(OutDir)" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(LINUXX64)) " SourceFiles="..\..\mpv\linux-2.1.0\libmpv.so.2" DestinationFolder="$(OutDir)" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\mpv\linux-2.1.0\libmpv.so.2" DestinationFolder="$(OutDir)" SkipUnchangedFiles="true" />
    <!-- TODO Compile libmpv for osx -->
    <!--<Copy Condition=" $(DefineConstants.Contains(PORTABLE)) " SourceFiles="..\..\mpv\osx\" DestinationFolder="$(OutDir)" SkipUnchangedFiles="true" />-->
  </Target>

  <Target Name="MediaInfoCopy" AfterTargets="LibMpvCopy">
    <Copy Condition=" $(DefineConstants.Contains(WINX64)) " SourceFiles="..\..\mediainfo\win\MediaInfo.dll" DestinationFolder="$(OutDir)\mediainfo" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(LINUXX64)) " SourceFiles="..\..\mediainfo\linux\libmediainfo.so.0.0.0;..\..\mediainfo\linux\libzen.so.0.4.41" DestinationFolder="$(OutDir)\mediainfo" SkipUnchangedFiles="true" />
    <Copy Condition=" $(DefineConstants.Contains(OSXX64)) " SourceFiles="..\..\mediainfo\osx\libmediainfo.dylib" DestinationFolder="$(OutDir)\mediainfo" SkipUnchangedFiles="true" />
  </Target>
</Project>
